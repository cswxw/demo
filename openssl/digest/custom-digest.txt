[root@localhost objects]# perl objects.pl objects.txt obj_mac.num obj_mac.h
/*
typedef struct asn1_object_st
{
const char *sn,*ln;
int nid;
int length;
unsigned char *data;
int flags;	/* Should we free this one */
} ASN1_OBJECT;

{"CN-GM-ECDSA-SM3","CN GM ECDSA Sign/Verify with SM3",
	NID_CN_GM_ECDSA_SM3,8,&(lvalues[5968]),0},
*/

[root@localhost objects]# grep ssf33 ./*
		./objects.txt:rsadsi 3 255    : SSF33     : ssf33             //第一步  添加标识
		./obj_mac.h:#define SN_ssf33		"SSF33"                   //SN标识
		./obj_mac.h:#define LN_ssf33		"ssf33"                   //LN标识
		./obj_mac.h:#define NID_ssf33		893                       //NID 
		./obj_mac.h:#define OBJ_ssf33		OBJ_rsadsi,3L,255L        //OBJ
		./obj_mac.num:ssf33		893                                   //num

		
    static const EVP_CIPHER ssf33_evp_cipher=
    {
        NID_ssf33,
        1,
        EVP_SSF33_KEY_SIZE,
        0,
        EVP_CIPH_VARIABLE_LENGTH,
        ssf33_init_key,
        ssf33_cipher,
        NULL,
        sizeof(EVP_SSF33_KEY),
        NULL,
        NULL,
        NULL,
        NULL
    };
		
		
		
[root@localhost objects]#

[root@localhost openssl-0.9.8q]# ./config && make
[root@localhost openssl-0.9.8q]# cd crypto/objects/
[root@localhost objects]# grep ssf33 ./*
./obj_dat.h:0x2A,0x86,0x48,0x86,0xF7,0x0D,0x03,0x81,0x7F,/* [5823] OBJ_ssf33 */
./obj_dat.h:{"SSF33","ssf33",NID_ssf33,9,&(lvalues[5823]),0},
./obj_dat.h:&(nid_objs[893]),/* "ssf33" */
./obj_dat.h:&(nid_objs[893]),/* OBJ_ssf33                        1 2 840 113549 3 255 */
Binary file ./obj_dat.o matches
./objects.txt:rsadsi 3 255    : SSF33     : ssf33
./obj_mac.h:#define SN_ssf33		"SSF33"
./obj_mac.h:#define LN_ssf33		"ssf33"
./obj_mac.h:#define NID_ssf33		893
./obj_mac.h:#define OBJ_ssf33		OBJ_rsadsi,3L,255L
./obj_mac.num:ssf33		893

其中 rsadsi 为已存在的标识符
/***********************************************************************/
static struct tag_name_st *tntmp, tnst [] = {
	ASN1_GEN_STR("BOOL", V_ASN1_BOOLEAN),
	ASN1_GEN_STR("BOOLEAN", V_ASN1_BOOLEAN),
	ASN1_GEN_STR("NULL", V_ASN1_NULL),
	ASN1_GEN_STR("INT", V_ASN1_INTEGER),
	ASN1_GEN_STR("INTEGER", V_ASN1_INTEGER),
	ASN1_GEN_STR("ENUM", V_ASN1_ENUMERATED),
	ASN1_GEN_STR("ENUMERATED", V_ASN1_ENUMERATED),
	ASN1_GEN_STR("OID", V_ASN1_OBJECT),
	ASN1_GEN_STR("OBJECT", V_ASN1_OBJECT),
	ASN1_GEN_STR("UTCTIME", V_ASN1_UTCTIME),
	ASN1_GEN_STR("UTC", V_ASN1_UTCTIME),
	ASN1_GEN_STR("GENERALIZEDTIME", V_ASN1_GENERALIZEDTIME),
	ASN1_GEN_STR("GENTIME", V_ASN1_GENERALIZEDTIME),
	ASN1_GEN_STR("OCT", V_ASN1_OCTET_STRING),
	ASN1_GEN_STR("OCTETSTRING", V_ASN1_OCTET_STRING),
	ASN1_GEN_STR("BITSTR", V_ASN1_BIT_STRING),
	ASN1_GEN_STR("BITSTRING", V_ASN1_BIT_STRING),
	ASN1_GEN_STR("UNIVERSALSTRING", V_ASN1_UNIVERSALSTRING),
	ASN1_GEN_STR("UNIV", V_ASN1_UNIVERSALSTRING),
	ASN1_GEN_STR("IA5", V_ASN1_IA5STRING),
	ASN1_GEN_STR("IA5STRING", V_ASN1_IA5STRING),
	ASN1_GEN_STR("UTF8", V_ASN1_UTF8STRING),
	ASN1_GEN_STR("UTF8String", V_ASN1_UTF8STRING),
	ASN1_GEN_STR("BMP", V_ASN1_BMPSTRING),
	ASN1_GEN_STR("BMPSTRING", V_ASN1_BMPSTRING),
	ASN1_GEN_STR("VISIBLESTRING", V_ASN1_VISIBLESTRING),
	ASN1_GEN_STR("VISIBLE", V_ASN1_VISIBLESTRING),
	ASN1_GEN_STR("PRINTABLESTRING", V_ASN1_PRINTABLESTRING),
	ASN1_GEN_STR("PRINTABLE", V_ASN1_PRINTABLESTRING),
	ASN1_GEN_STR("T61", V_ASN1_T61STRING),
	ASN1_GEN_STR("T61STRING", V_ASN1_T61STRING),
	ASN1_GEN_STR("TELETEXSTRING", V_ASN1_T61STRING),
	ASN1_GEN_STR("GeneralString", V_ASN1_GENERALSTRING),
	ASN1_GEN_STR("GENSTR", V_ASN1_GENERALSTRING),

	/* Special cases */
	ASN1_GEN_STR("SEQUENCE", V_ASN1_SEQUENCE),
	ASN1_GEN_STR("SEQ", V_ASN1_SEQUENCE),
	ASN1_GEN_STR("SET", V_ASN1_SET),
	/* type modifiers */
	/* Explicit tag */
	ASN1_GEN_STR("EXP", ASN1_GEN_FLAG_EXP),
	ASN1_GEN_STR("EXPLICIT", ASN1_GEN_FLAG_EXP),
	/* Implicit tag */
	ASN1_GEN_STR("IMP", ASN1_GEN_FLAG_IMP),
	ASN1_GEN_STR("IMPLICIT", ASN1_GEN_FLAG_IMP),
	/* OCTET STRING wrapper */
	ASN1_GEN_STR("OCTWRAP", ASN1_GEN_FLAG_OCTWRAP),
	/* SEQUENCE wrapper */
	ASN1_GEN_STR("SEQWRAP", ASN1_GEN_FLAG_SEQWRAP),
	/* SET wrapper */
	ASN1_GEN_STR("SETWRAP", ASN1_GEN_FLAG_SETWRAP),
	/* BIT STRING wrapper */
	ASN1_GEN_STR("BITWRAP", ASN1_GEN_FLAG_BITWRAP),
	ASN1_GEN_STR("FORM", ASN1_GEN_FLAG_FORMAT),
	ASN1_GEN_STR("FORMAT", ASN1_GEN_FLAG_FORMAT),
};


/***********************************************************************/
demo:
	使用openssl中的asn1parse命令进行OID标识符转换为ASN1编码

										//openssl asn1parse -genstr BITSTR:1.2.840.113549.1.1.5.2.3 -out oid.hex
	[root@localhost card-code]$ openssl asn1parse -genstr OBJECT:1.2.840.113549.1.1.14 -out oid.hex
		0:d=0  hl=2 l=   9 prim: OBJECT            :sha224WithRSAEncryption
	[root@localhost card-code]$hexdump -C oid.hex 
	00000000  06 09 2a 86 48 86 f7 0d  01 01 0e                 |..*.H......|
	0000000b
	[root@localhost card-code]$
	obj_dat.h:
		0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0E,/* [4537] OBJ_sha224WithRSAEncryption */

	
	
说明：
方法1：

	1. 把OID标识符转换为ASN1编码

		使用openssl中的asn1parse命令进行OID标识符转换为ASN1编码，命令示例如下：

		openssl asn1parse -genstr OBJECT:1.2.156.10197.6.1.4.2.1 -out /root/Desktop/OID.hex

	其中-genstr为要把后面的字符串转换为ASN1格式，OBJECT为字符串的ASN1类型，1.2.156.10197.1.401为要转换的OID标识符号，-out /root/Desktop/OID.hex表示命令的转换结果输出到/root/Desktop/OID.hex文件。

		命令转换结果为：

		06 0A 2A 81 1C CF 55 06 01 04 02 01

	注意：/root/Desktop/OID.hex需使用二进制查看。

	2. 把ASN1编码加入openssl的编码表中

		此处以openssl 1.1.0d版本为例，把转换好的ASN1编码加入到crypto/objects/obj_dat.h的so数组最后，注意添加多少字节把数组大小增加多大。即把上述转换的结果中的第三个字节开始添加到数组中，即把2A 81 1C CF 55 06 01 04 02 01加入so数组。
		
	3. 添加nid和objs对应表

		1.2.156.10197.6.1.4.2.1为GM/T0010中data数据类型的OID标识符，需要定义NID_gmt0010_data的宏，宏值根据现有的NID宏最大值+1开始定义；

		在nid_objs最后增加NID_gmt0010_data对应的结构体值，其中数据长度是刚才填入so表中的数据的长度，最后一个ASN1编码的数据地址为刚才填入的数据的起始位置，主要参考nid_objs数组中的原有内容进行添加；

	注意：NID_gmt0010_data的定义在crypto/objects/obj_mac.h和crypto/objects/objects.h中都有，注意参照原有定义进行定义。

		增加后注意修改NUM_NID的大小。	
		
	4. 在obj_objs中添加NID_gmt0010_data值

	把刚才定义的NID_gmt0010_data添加到obj_objs中，注意添加需要按照在1中填入的数据的长度和值按照相同长度的升序排序加入到obj_objs数组中，修改完成后注意修改NUM_OBJ的值。


	至此，一个OID标识符就添加完成了，GM/T0010标准中的其他标识符添加方法类似。


方法2：

	1. 直接在crypto/objects/objects.txt文件中增加自己要增加的对象标识符OID，具体如何添加参考此文件内容；

	2. 回到openssl的根目录，重新配置openssl，即运行./config命令，此命令根据自己的实际情况添加参数；

	3. make update

	4. 查看修改前后是否都添加好。


/***********************************************************************/
obj_dat.h
	typedef struct asn1_object_st
	{
	const char *sn,*ln;
	int nid;
	int length;
	unsigned char *data;
	int flags;	/* Should we free this one */
	} ASN1_OBJECT;


	static unsigned char lvalues[5993]={   //存放二进制数据 asn1数据
	0x00,                                        /* [  0] OBJ_undef */
	0x2A,0x86,0x48,0x86,0xF7,0x0D,               /* [  1] OBJ_rsadsi */
	//...
	}


	static ASN1_OBJECT nid_objs[NUM_NID]={   // 存放数据   main
	{"UNDEF","undefined",NID_undef,1,&(lvalues[0]),0},
	{"rsadsi","RSA Data Security, Inc.",NID_rsadsi,6,&(lvalues[1]),0},
	{"pkcs","RSA Data Security, Inc. PKCS",NID_pkcs,7,&(lvalues[7]),0},
	{"MD2","md2",NID_md2,8,&(lvalues[14]),0},
	//...
	}


	static ASN1_OBJECT *sn_objs[NUM_SN]={  //存放nid_objs地址
	&(nid_objs[364]),/* "AD_DVCS" */
	//....
	}

/***********************************************************************/

/*********************************************************************************/
ecc的过程与rsa相比有很大的不同，ecc涉及到了很多额外的概念，比如group等等，
另外ecc包含两套截然不同的机制，这就是ecdsa和ecdh，这两套机制统一于ecc，
在非ecc算法中，这两套机制是由两个独立的算法实现的，
比如对于加密/解密以及签名/验证这一类需求来说使用的是rsa，dsa，对于密钥协商这一类需求来说使用的是dh，
如何把这两类算法统一到一个结构中是类似openssl等框架需要解决的问题，
openssl将所有的关于“密钥”的信息全部放入一个结构体中，这个结构体就是EVP_PKEY，
这些信息包括密钥本身和关于这些密钥的操作，这些操作中最重要的就是诸如产生密钥以及验证签名之类的操作了，
由于密钥操作仅仅是一些标准，各个机构可以有自己的定制化实现，于是engine的作用就体现出来了，
按照oo的观点，将engine封装到key当中是个很好的设计，
因为几乎所有的加密解密签名验证操作都是围绕着key进行的，所以engine几乎都在key相关的结构中
/*********************************************************************************/
ECC:
密码学中，描述一条Fp上的椭圆曲线，常用到六个参量：T=(p,a,b,n,x,y [,h])。
（p 、a 、b） 用来确定一条椭圆曲线，p为素数域内点的个数，a和b是其内的两个大数；
		x,y为G基点的坐标，也是两个大数；
		有时候我们还会用到h(椭圆曲线上所有点的个数p与n相除的整数部分)。
n为点G基点的阶；
以上六个量就可以描述一条椭圆曲线，
struct ec_key_st {
	int version;

	EC_GROUP *group;       //私钥与公钥对应的曲线   //曲线组，这是ecc的核心概念 //int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)

	EC_POINT *pub_key;    //公钥  在ecc中，公钥就是一个曲线上的“点”
	BIGNUM	 *priv_key;   //私钥  在ecc中，私钥是一个大数，通过这个大数和“基点”相乘能得到公钥

	unsigned int enc_flag;
	point_conversion_form_t conv_form;

	int 	references;

	EC_EXTRA_DATA *method_data;   //这个结构体动态确定是dh还是dsa或者别的什么。
} /* EC_KEY */;

struct ec_group_st {
	const EC_METHOD *meth;

	EC_POINT *generator; /* optional */
	BIGNUM order, cofactor;

	int curve_name;/* optional NID for named curve */
	int asn1_flag; /* flag to control the asn1 encoding */
	point_conversion_form_t asn1_form;

	unsigned char *seed; /* optional seed for parameters (appears in ASN1) */
	size_t seed_len;

	EC_EXTRA_DATA *extra_data; /* linked list */

	/* The following members are handled by the method functions,
	 * even if they appear generic */
	
	BIGNUM field; /* Field specification.
	               * For curves over GF(p), this is the modulus;
	               * for curves over GF(2^m), this is the 
	               * irreducible polynomial defining the field.
	               */

	unsigned int poly[5]; /* Field specification for curves over GF(2^m).
	                       * The irreducible f(t) is then of the form:
	                       *     t^poly[0] + t^poly[1] + ... + t^poly[k]
	                       * where m = poly[0] > poly[1] > ... > poly[k] = 0.
	                       */

	BIGNUM a, b; /* Curve coefficients.
	              * (Here the assumption is that BIGNUMs can be used
	              * or abused for all kinds of fields, not just GF(p).)
	              * For characteristic  > 3,  the curve is defined
	              * by a Weierstrass equation of the form
	              *     y^2 = x^3 + a*x + b.
	              * For characteristic  2,  the curve is defined by
	              * an equation of the form
	              *     y^2 + x*y = x^3 + a*x^2 + b.
	              */

	int a_is_minus3; /* enable optimized point arithmetics for special case */

	void *field_data1; /* method-specific (e.g., Montgomery structure) */
	void *field_data2; /* method-specific */
	int (*field_mod_func)(BIGNUM *, const BIGNUM *, const BIGNUM *,	BN_CTX *); /* method-specific */
} /* EC_GROUP */;



struct ecdh_method 
	{
	const char *name;
	int (*compute_key)(void *key, size_t outlen, const EC_POINT *pub_key, EC_KEY *ecdh,
	                   void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen));
#if 0
	int (*init)(EC_KEY *eckey);
	int (*finish)(EC_KEY *eckey);
#endif
	int flags;
	char *app_data;
	};
	
	


typedef struct ecdh_data_st {
	/* EC_KEY_METH_DATA part */
	int (*init)(EC_KEY *);
	/* method specific part */
	ENGINE	*engine;
	int	flags;
	const ECDH_METHOD *meth;
	CRYPTO_EX_DATA ex_data;
} ECDH_DATA;







struct ecdsa_method 
	{
	const char *name;
	ECDSA_SIG *(*ecdsa_do_sign)(const unsigned char *dgst, int dgst_len, 
			const BIGNUM *inv, const BIGNUM *rp, EC_KEY *eckey);
	int (*ecdsa_sign_setup)(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, 
			BIGNUM **r);
	int (*ecdsa_do_verify)(const unsigned char *dgst, int dgst_len, 
			const ECDSA_SIG *sig, EC_KEY *eckey);
#if 0
	int (*init)(EC_KEY *eckey);
	int (*finish)(EC_KEY *eckey);
#endif
	int flags;
	char *app_data;
	};



typedef struct ecdsa_data_st {
	/* EC_KEY_METH_DATA part */
	int (*init)(EC_KEY *);
	/* method (ECDSA) specific part */
	ENGINE	*engine;
	int	flags;
	const ECDSA_METHOD *meth;
	CRYPTO_EX_DATA ex_data;
} ECDSA_DATA;





/* Type needs to be a bit field
 * Sub-type needs to be for variations on the method, as in, can it do
 * arbitrary encryption.... */
struct evp_pkey_st
	{
	int type;
	int save_type;
	int references;
	union	{
		char *ptr;
#ifndef OPENSSL_NO_RSA
		struct rsa_st *rsa;	/* RSA */
#endif
#ifndef OPENSSL_NO_DSA
		struct dsa_st *dsa;	/* DSA */
#endif
#ifndef OPENSSL_NO_DH
		struct dh_st *dh;	/* DH */
#endif
#ifndef OPENSSL_NO_EC
		struct ec_key_st *ec;	/* ECC */
#endif
		} pkey;
	int save_parameters;
	STACK_OF(X509_ATTRIBUTE) *attributes; /* [ 0 ] */
	} /* EVP_PKEY */;


/*********************************************************************************/
/*********************************************************************************/
EVP_MD是一个很重要的数据结构，其实也是一个数据以及操作封装在一起的结构体，实现了一个签名以及签名验证逻辑框架，
EVP_MD是一个逻辑上比engine更上层的封装，EVP_MD可以看作是逻辑封装，而engine则是实现这些逻辑的算法封装：

EVP_MD不但实现了摘要算法，还包含了签名以及验证的过程封装函数，
实际上所谓的签名算法就是摘要算法和不对称私钥加密的组合算法，

调用EVP_VerifyInit_ex，该函数会从默认engine中寻找对应type的EVP_MD，
如果你有自己的engine并且实现了对应的EVP_MD，那么就可以通过加载自己的engine来使用自己的EVP_MD；
顺便说一句，EVP_MD从engine中的提取过程和cipher从engine中的提取过程无异。


调用EVP_VerifyUpdate，这是通过调用在第5步初始化好的EVP_MD中的update回调函数完成的；

调用EVP_VerifyFinal完成最后的步骤。在EVP_VerifyFinal中首先调用EVP_DigestFinal_ex完成摘要的计算过程，
随后调用EVP_MD的verify回调函数：
	EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
	i = ctx->digest->verify(ctx->digest->type,m,m_len, sigbuf,siglen,pkey->pkey.ptr);

对于ecc来讲，该回调函数verify就是ECDSA_verify，该函数最终调用ECDSA_do_verify：
	int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
			const ECDSA_SIG *sig, EC_KEY *eckey)
	{ //该回调函数最后一个参数之所以会随着算法的不同而不同是因为pkey成员是个联合
		ECDSA_DATA *ecdsa = ecdsa_check(eckey);
		return ecdsa->meth->ecdsa_do_verify(dgst, dgst_len, sig, eckey);
	}

最终ecdsa_check决定了现在要使用的是EC_KEY中的method_data中的类型为ECDSA_DATA的数据；

接下来调用ECDSA_METHOD的ecdsa_do_verify完成最后的操作。

struct env_md_st
	{
	int type;
	int pkey_type;
	int md_size;
	unsigned long flags;
	int (*init)(EVP_MD_CTX *ctx);       //初始化
	int (*update)(EVP_MD_CTX *ctx,const void *data,size_t count);//操作
	int (*final)(EVP_MD_CTX *ctx,unsigned char *md); //操作结束
	int (*copy)(EVP_MD_CTX *to,const EVP_MD_CTX *from);
	int (*cleanup)(EVP_MD_CTX *ctx);

	/* FIXME: prototype these some day */
	int (*sign)(int type, const unsigned char *m, unsigned int m_length,
		    unsigned char *sigret, unsigned int *siglen, void *key);
	int (*verify)(int type, const unsigned char *m, unsigned int m_length,
		      const unsigned char *sigbuf, unsigned int siglen,
		      void *key);
	int required_pkey_type[5]; /*EVP_PKEY_xxx */
	int block_size;
	int ctx_size; /* how big does the ctx->md_data need to be */
	} /* EVP_MD */;




/*********************************************************************************/







https://docs.oracle.com/cd/E24847_01/html/E22200/emrbk.html#scrolltoc
https://docs.oracle.com/cd/E24847_01/html/819-7061/pam-32.html#SYSADV6pam-32





编译:
	出现“yywrap未定义”等错误
		http://ftp.gnu.org/gnu/autoconf/autoconf-2.60.tar.gz
		https://github.com/westes/flex/archive/v2.6.0.zip
	
	
	automake
		libtool-2.4.2-22.el7_3.x86_64
		intltool-0.50.2-7.el7.noarch
	

gcc -fPIC -c pam_module-name.c
ld -x --shared -o pam_module-name.so pam_module-name.o


pam模块介绍
	https://www.cnblogs.com/ilinuxer/p/5087447.html


pam 
	第一列代表模块类型
	第二列代表控制标记
	第三列代表模块路径
	第四列代表模块参数
	
PAM的模块类型
	Linux-PAM有四种模块类型,分别代表四种不同的任务，它们是:认证管理(auth),账号管理(account),会话管理(session)和密码(password)管理,一个类型可能有多行,它们按顺序依次由PAM模块调用.

	管理方式 说明
		auth 用来对用户的身份进行识别.如:提示用户输入密码,或判断用户是否为root等.
		account 对帐号的各项属性进行检查.如:是否允许登录,是否达到最大用户数,或是root用户是否允许在这个终端登录等.
		session 这个模块用来定义用户登录前的,及用户退出后所要进行的操作.如:登录连接信息,用户数据的打开与关闭,挂载文件系统等.
		password 使用用户信息来更新.如:修改用户密码.
		
		
PAM的控制标记
	PAM使用控制标记来处理和判断各个模块的返回值.（在此只说明简单的认证标记）

	控制标记 说明
		required 表示即使某个模块对用户的验证失败，也要等所有的模块都执行完毕后,PAM 才返回错误信息。这样做是为了不让用户知道被哪个模块拒绝。如果对用户验证成功，所有的模块都会返回成功信息。
		requisite 与required相似,但是如果这个模块返回失败,则立刻向应用程序返回失败,表示此类型失败.不再进行同类型后面的操作.
		sufficient 表示如果一个用户通过这个模块的验证，PAM结构就立刻返回验证成功信息（即使前面有模块fail了，也会把 fail结果忽略掉），把控制权交回应用程序。后面的层叠模块即使使用requisite或者required 控制标志，也不再执行。如果验证失败，sufficient 的作用和optional相同。
		optional 表示即使本行指定的模块验证失败，也允许用户接受应用程序提供的服务，一般返回PAM_IGNORE(忽略).
		
		
模块路径
	模块路径.即要调用模块的位置. 如果是64位系统，一般保存在/lib64/security,如: pam_unix.so同一个模块,
	可以出现在不同的类型中.它在不同的类型中所执行的操作都不相同.这是由于每个模块针对不同的模块类型,编制了不同的执行函数.
	
	
	
	
常用PAM模块介绍
	PAM模块 管理类型 说明
	pam_unix.so auth 提示用户输入密码,并与/etc/shadow文件相比对.匹配返回0
	pam_unix.so account 检查用户的账号信息(包括是否过期等).帐号可用时,返回0.
	pam_unix.so password 修改用户的密码. 将用户输入的密码,作为用户的新密码更新shadow文件

	pam_shells.so （auth，account） 如果用户想登录系统，那么它的shell必须是在/etc/shells文件中

	pam_deny.so （account，auth，password，session） 该模块可用于拒绝访问

	pam_deny.so （account，auth，password，session）模块任何时候都返回成功

	pam_securetty.so auth 如果用户要以root登录时,则登录的tty必须在/etc/securetty之中

	pam_listfile.so （account，auth，password，session） 访问应用程的控制开关

	pam_cracklib.so password 这个模块可以插入到一个程序的密码栈中,用于检查密码的强度

	pam_limits.so session 定义使用系统资源的上限，root用户也会受此限制，可以通过/etc/security/limits.conf或/etc/security/limits.d/*.conf来设定
	
	

在应用程序中使用PAM认证
	每个使用PAM认证的应用程序都以pam_start开始，pam_end结束。
	PAM还提供了pam_get_item和pam_set_item共享有关认证会话的某些公共信息，例如用户名，服务名，密码和会话函数。应用程序在调用了pam_start ()后也能够用这些APIs来改变状态信息。实际做认证工作的API函数有六个（以下将这六个函数简称为认证API）：

    认证管理--包括pam_authenticate ()函数认证用户，pam_setcred ()设置，刷新，或销毁用户证书。
    账号管理--包括pam_acc_mgmt ()检查认证的用户是否可以访问他们的账户，该函数可以实现口令有效期，访问时间限制等。
    会话管理--包括pam_open_session ()和pam_close_session ()函数用来管理会话和记账。例如，系统可以存储会话的全部时间。
    口令管理--包括pam_chauthok ()函数用来改变密码。


	



PAM API

1、框架API：

任何一个支持PAM的服务程序在进行认证时必须以pam_start( )开始进行初始化，最后以pam_end( )结束以便进行清理工作。

2、认证管理API：

pam_authenticate( )对用户名/密码进行认证。

pam_setcred( )用来修改用户的秘密信息。

3、帐户管理API：

pam_acct_mgmt( )检查帐户本身是否有权限登录系统、帐户是否过期、帐户是否有登录时间限制等。

4、密码管理API：

pam_chauthtok( )修改用户的密码。

5、会话管理API：

一个会话以pam_open_session( )开始，最后以pam_close_session( )结束。

6、其它：

pam_get_item( )、pam_set_item( )用来读写PAM事务(transaction)的状态信息。

pam_get_data( )、pam_set_data( )用来取得和设置PAM模块及会话的相关信息。

pam_putenv( )、pam_getenv( )、pam_getenvlist( )用来读写环境变量。

pam_strerror( )返回相关的错误信息。

例子程序（摘自Sun的白皮书）：

下面的例子使用PAM API写了一个简单的login服务程序（注：这不是个完整的程序，所以省略了对pam_close_session的调用）。

见pam_api_sample文件

 

八、PAM SPI

当服务程序（ftpd、telnetd等）调用PAM API函数pam_xxx( )时，由PAM 框架（libpam）根据该服务在/etc/pam.conf文件中的配置调用指 定的PAM模块中对应的SPI函数pam_sm_xxx()。如下：API函数的名字为pam_xxx( )，对应的SPI函数的名字为pam_sm_xxx( )，即每个服务模块需要引出相应的函数以供libpam调用。为方便对 照，再列一下。

API 对应的 SPI

帐号管理 pam_acct_mgmt( ) pam_sm_acct_mgmt( )

认证管理 pam_authenticate( ) pam_ sm_authenticate( )

密码管理 pam_chauthtok( ) pam_ sm_chauthtok( )

会话管理 pam_open_session( ) pam_ sm_open_session( )

会话管理 pam_close_session( ) pam_ sm_close_session( )

认证管理 pam_setcred( ) pam_ sm_setcred( )



Linux-PAM 工作的“类别”（type）

PAM 的具体工作主要有以下四种类别（type）：account，auth，password 以及 session。这里，我们用非定义化的语言来简单解释一下这四种类别。


	account：在用户能不能使用某服务上具有发言权，但不负责身份认证。比如，account 这个 type 可以检查用户能不能在一天的某个时间段登录系统、这个用户有没有过期、以及当前的登录用户数是否已经饱和等等。通常情况下，在登录系统时，如果你连 account 这个条件都没满足的话，即便有密码也还是进不去系统的。

	auth：验证“你的确是你”的 type 。一般来说，询问你密码的就是这个 type。假如你的验证方式有很多，比如一次性密码、指纹、虹膜等等，都应该添加在 auth 下。auth 做的另外一件事情是权限授予，比如赋给用户某个组的组员身份等等。

	password：主要负责和密码有关的工作。修改密码的时候有时会提示“密码不够长”、“密码是个常用单词”之类的，就是在这里设置的。在这里还设置了保存密码时使用了哪种加密方式（比如现在常用的 SHA-512）。请注意，这里的密码不局限于 /etc/shadow 中的密码，有关认证 token 的管理都应该在此设置：如果你使用指纹登录 Linux，在设置新指纹时，如果希望首先验证这是人的指纹而不是狗的指纹，也应该放在这里。

	session：一个“忙前忙后”的 type，它要在某个服务提供给用户之前和之后做各种工作。比如用户登录之前要将用户家目录准备好，或者在用户登录之后输出 motd 等等。

	请注意：PAM 不仅仅在用户登录时才发挥作用，sudo命令，su命令，passwd命令都会用到 PAM。前文中所有提及“登录”的地方都仅仅是举例，您完全可以用其他需要用户认证的服务（或者命令）去举例，从而更全面地理解 PAM。


	
required：如果本条目没有被满足，那最终本次认证一定失败，但认证过程不因此打断。整个栈运行完毕之后才会返回（已经注定了的）“认证失败”信号。

requisite：如果本条目没有被满足，那本次认证一定失败，而且整个栈立即中止并返回错误信号。

sufficient：如果本条目的条件被满足，且本条目之前没有任何required条目失败，则立即返回“认证成功”信号；如果对本条目的验证失败，不对结果造成影响。

optional：该条目仅在整个栈中只有这一个条目时才有决定性作用，否则无论该条验证成功与否都和最终结果无关。

include：将其他配置文件中的流程栈包含在当前的位置，就好像将其他配置文件中的内容复制粘贴到这里一样。

substack：运行其他配置文件中的流程，并将整个运行结果作为该行的结果进行输出。该模式和 include 的不同点在于认证结果的作用域：如果某个流程栈 include 了一个带 requisite 的栈，这个 requisite 失败将直接导致认证失败，同时退出栈；而某个流程栈 substack 了同样的栈时，requisite 的失败只会导致这个子栈返回失败信号，母栈并不会在此退出。










流程栈中很可能有多个验证规则，每条验证的返回值可能不尽相同，那么到底哪一个验证规则能作为最终的结果呢？这就需要 actionN 的值来决定了。actionN 的值有以下几种：


ignore：在一个栈中有多个认证条目的情况下，如果标记 ignore 的返回值被命中，那么这条返回值不会对最终的认证结果产生影响。

bad：标记 bad 的返回值被命中时，最终的认证结果注定会失败。此外，如果这条 bad 的返回值是整个栈的第一个失败项，那么整个栈的返回值一定是这个返回值，后面的认证无论结果怎样都改变不了现状了。

die：标记 die 的返回值被命中时，马上退出栈并宣告失败。整个返回值为这个 die 的返回值。

ok：在一个栈的运行过程中，如果 ok 前面没有返回值，或者前面的返回值为 PAM_SUCCESS，那么这个标记了 ok 的返回值将覆盖前面的返回值。但如果前面执行过的验证中有最终将导致失败的返回值，那 ok 标记的值将不会起作用。

done：在前面没有 bad 值被命中的情况下，done 值被命中之后将马上被返回，并退出整个栈。

N（一个自然数）：功效和 ok 类似，并且会跳过接下来的 N 个验证步骤。如果 N = 0 则和 ok 完全相同。

reset：清空之前生效的返回值，并且从下面的验证起重新开始。

我们在前文中已经介绍了控制模式（contro）的“关键字”模式。实际上，“关键字”模式可以等效地用“返回值=行为”模式来表示。具体的对应如下：


required：
[success=ok new_authtok_reqd=ok ignore=ignore default=bad]


requisite：
[success=ok new_authtok_reqd=ok ignore=ignore default=die]


sufficient：
[success=done new_authtok_reqd=done default=ignore]


optional：
[success=ok new_authtok_reqd=ok default=ignore]








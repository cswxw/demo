android 签名：
	关键词有sign，signature，checkSign，signCheck，getPackageManager，getPackageInfo，verify，same

	
	
	
	
1.Java层通过

   getPackageManager().getPackageInfo.signatures 获取签名信息；

2.Native方法
	/DLL/Lua脚本等通过获取Java的context/Activity对象，反射调用getPackageInfo等来获取签名；
3.首先获取apk的路径，定位到META-INF*.RSA文件，获取其中的签名信息；
4.能自动识别apk的加固类型；


	方式一：substrate框架libhooksig By空道

			1.so文件用于hook sign

			2.应用于在程序运行时获取当前进程的签名信息而进行的验证；

	方式二：重写继承类packageInfo和PackageManager By小白

			1.适用于Java层packageInfo获取签名信息的方式；

			2.亦适用于Native/DLL/LUA层反射packageInfo获取签名信息的方式；

			3.该种方式可能会使PackageInfo中的versionCode和versionName为NULL，对程序运行有影响的话，需自主填充修复；

	方式三：重写继承类，重置Sign信息；

			1.适用于Java层packageInfo获取签名信息的方式；

			2.亦适用于Native/DLL/LUA层反射packageInfo获取签名信息的方式；

			3.该种方式可能会使PackageInfo中的versionCode和versionName为NULL，对程序运行有影响的话，需自主填充修复；

	方式四：针对定位到具体RSA文件路径获取签名的验证方式；

			1.针对定位到具体RSA文件路径获取签名的验证方式；

			2.曾经破解过消消乐_Ver1.27,但是如果程序本身对META-INF签名文件中的MANIFEST.MF进行了校验，此方式无效，那就非签名校验，而是文件校验了；

	方式五：hook android 解析的packageparse类中的两个验证方法

	  pp.collectCertificates(pkg, parseFlags);
	  pp.collectManifestDigest(pkg);

	  
	  
	通过以上信息，我们可以得到的是，证书作为不变的内容放在PKCS7格式的.RSA文件中，我们在RSA文件上验证的也只有证书。

		方案一：通过PackageManag对象可以获取APK自身的签名 这里得到的sign为证书的所有数据，对其做摘要算法，例如:
		MD5可以得到MD5指纹，对比指纹可以进行安全验证。
		Java程序都可以使用jni反射在native实现，Java代码太容易破解，不建议防止到Java端。方法有很多，最后是都通过

	  context.getPackageManager().getPackageInfo(
						this.getPackageName(), PackageManager.GET_SIGNATURES).signatures）

		方案二：调用隐藏类PackageParser.java中的collectCertificates方法，从源头获取cert证书

		方案三：使用openssl使用JNI做RSA解析破解难度是相当的大，同样的解析出x.509证书，java解析转换为native解析so文件，但得到的文件比较大1.3M。。。。显然不可取（太大）

		方案四：通过源码解析我们可以知道，apk文件验证是按照zip文件目录形式查找到.RSA文件结尾，我们可以直接去取文件的绝对路径，拿到证书的公钥信息进行验证（但需要引入PKCS7的库）

		方案五：由棒棒加固和爱加密做的思路可以知道，自己重新定制摘要算法，在asset
		里面重新搞一套验证流程。思路就是生成一个定制的CERT，另外开辟一套验证流程，不使用Android固有的签名认证流程。



	

修改方式一：我们可以在HEX界面右键Edit将D0改为D1，再右键Apply changes来保存修改，需要注意的是，在IDA中的修改仅仅是为了验证我们修改的正确与否，源文件并不会改变，我们可以定位修改位置后再利用010Editor、UltraEdit等编辑器来对源文件进行修改。
	
修改方式二：当然，强大的IDA怎么可能没有修改后保存的功能呢。我们可以使用Edit->Patch Program菜单来方便的进行修改保存。
（需要注意的是，Patch Program菜单是GUI版本的IDA的一项隐藏功能，用户需要编辑idagui.cfg配置文件才能激活该菜单， 编辑IDA配置文件cfg目录下的idagui.cfg，修改DISPLAY_PATCH_SUBMENU=YES，重启IDA即可）

	首先我们在IDA View 中显示 十六进制机器码, Options -> General -> Disassembly -> Number of opcode bytes = 8
	然后Edit->Patch Program->Change byte
	//改数值
	然后Edit->Patch Program->Apple patches to input file
	OK即可
	
	
	
	
//===============================================================================================//
签名验证:
1. 获取 PackageInfo 中的 Signature
 PackageManager pm = context.getPackageManager();
 String packageName = context.getPackageName(); 
 try { 
	PackageInfo packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
	Signature sign = info.signatures[0]; 
	Log.i("test", "hashCode : " + sign.hashCode()); } 
 catch (NameNotFoundException e) { 
	e.printStackTrace(); 
 }

2. 获取公钥SHA1
		private byte[] getCertificateSHA1(Context context)
		{
		PackageManager pm = context.getPackageManager();
		String packageName = context.getPackageName();
		try
		{
			PackageInfo packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
			Signature[] signatures = packageInfo.signatures;
			byte[] cert = signatures[0].toByteArray();
			X509Certificate x509 = X509Certificate.getInstance(cert);
			MessageDigest md = MessageDigest.getInstance("SHA1");
			return md.digest(x509.getEncoded());
		}
		catch (PackageManager.NameNotFoundException | CertificateException | NoSuchAlgorithmException e)
		{
			e.printStackTrace();
		} 
		return null;
		}

	对应的 native 代码：
		int getSignHashCode(JNIEnv * env, jobject context)
		{
			jclass context_clazz = ( * env)->GetObjectClass(env,
															context);
			//Context的类
			jmethodID methodID_getPackageManager = ( * env)->GetMethodID(env, context_clazz,
																		 "getPackageManager",
																		 "()Landroid/content/pm/PackageManager;");// 得到 getPackageManager 方法的 ID
			jobject packageManager = ( * env)->CallObjectMethod(env, context,
																methodID_getPackageManager); // 获得PackageManager对象
			jclass pm_clazz = ( * env)->GetObjectClass(env,
													   packageManager); // 获得 PackageManager 类
			jmethodID methodID_pm = ( * env)->GetMethodID(env, pm_clazz, "getPackageInfo",
														  "(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;");// 得到 getPackageInfo 方法的 ID
			jmethodID methodID_pack = ( * env)->GetMethodID(env, context_clazz, "getPackageName",
															"()Ljava/lang/String;");// 得到 getPackageName 方法的 ID
			jstring application_package = ( * env)->CallObjectMethod(env, context,
																	 methodID_pack); // 获得当前应用的包名
			const char * str = ( * env)->GetStringUTFChars(env, application_package, 0);
			__android_log_print(ANDROID_LOG_DEBUG, "JNI", "packageName: %s\n", str);
			jobject packageInfo = ( * env)->CallObjectMethod(env, packageManager, methodID_pm,
															 application_package,
															 64);// 获得PackageInfo
			jclass packageinfo_clazz = ( * env)->GetObjectClass(env, packageInfo);
			jfieldID fieldID_signatures = ( * env)->GetFieldID(env, packageinfo_clazz, "signatures",
															   "[Landroid/content/pm/Signature;");
			jobjectArray signature_arr = (jobjectArray)( * env)->GetObjectField(env, packageInfo,
																				fieldID_signatures);
			jobject signature = ( * env)->GetObjectArrayElement(env, signature_arr,
																0); //Signature数组中取出第一个元素
			jclass signature_clazz = ( * env)->GetObjectClass(env, signature); //读signature的hashcode
			jmethodID methodID_hashcode = ( * env)->GetMethodID(env, signature_clazz, "hashCode", "()I");
			jint hashCode = ( * env)->CallIntMethod(env, signature, methodID_hashcode);
			__android_log_print(ANDROID_LOG_DEBUG, "JNI", "hashcode: %d\n", hashCode); return hashCode;
		}


3. 证书完整性校验
	import sun.security.pkcs.PKCS7; //注意：需要引入jar包android-support-v4 
	import java.io.FileInputStream; 
	import java.io.IOException; 
	import java.security.cert.CertificateException; 
	import java.security.cert.X509Certificate; 
	public class Test { 
		public static void main(String[] args) throws CertificateException, IOException { 
			FileInputStream fis = new FileInputStream("/home/AnyMarvel/CERT.RSA"); 
			PKCS7 pkcs7 = new PKCS7(fis); 
			X509Certificate publicKey = pkcs7.getCertificates()[0]; 
			System.out.println("issuer1:" + publicKey.getIssuerDN()); 
			System.out.println("subject2:" + publicKey.getSubjectDN()); 
			System.out.println(publicKey.getPublicKey());
		} 
	}



//===============================================================================================//



